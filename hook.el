;; !package
(require 'package)
;; (setq package-archives '(("melpa" . "http://melpa.org/packages/")))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)
;; (package-refresh-contents)
(defun f-package-menu-mode ()
  (local-set-key (kbd "[") 'package-menu-describe-package)
  (local-set-key (kbd "]") 'next-line)
  (local-unset-key (kbd "n"))
  )
(add-hook 'package-menu-mode-hook 'f-package-menu-mode)

;; avy
(setq avy-keys (number-sequence ?a ?z))

;; bs
(defun f-bs-mode ()
  (local-set-key (kbd "-") 'bs-set-current-buffer-to-show-never)
  (local-set-key (kbd "=") 'bs-set-current-buffer-to-show-always)
  (local-set-key (kbd "[") 'bs-select)
  (local-set-key (kbd "]") 'bs-down)
  (local-set-key (kbd "i") 'bs-select)
  (local-set-key (kbd "o") 'bs-down)
  (local-set-key (kbd "r") 'bs-select-other-window)
  (local-set-key (kbd "u") 'bs-up)
  (local-set-key (kbd "w") 'bs-toggle-readonly)
  (local-unset-key (kbd "%"))
  (local-unset-key (kbd "+"))
  (local-unset-key (kbd "C"))
  (local-unset-key (kbd "M"))
  (local-unset-key (kbd "S"))
  (local-unset-key (kbd "b"))
  (local-unset-key (kbd "f"))
  (local-unset-key (kbd "k"))
  (local-unset-key (kbd "n"))
  (local-unset-key (kbd "t"))
  (local-unset-key (kbd "~"))
  )
(add-hook 'bs-mode-hook 'f-bs-mode)

;; cua
(cua-rectangle-mark-mode)
(define-key cua--rectangle-keymap (kbd "<left>") 'cua-move-rectangle-left)
(define-key cua--rectangle-keymap (kbd "<right>") 'cua-move-rectangle-right)
(define-key cua--rectangle-keymap (kbd "C-<left>") 'cua-move-rectangle-up)
(define-key cua--rectangle-keymap (kbd "C-<right>") 'cua-move-rectangle-down)
(define-key cua--rectangle-keymap (kbd "M-g C-3") 'f-cua-sequence-rectangle)
(define-key cua--rectangle-keymap (kbd "TAB") 'cua-exchange-point-and-mark)

;; ess
(defun f-ess-clear-inferior ()
  (interactive)
  (with-temp-buffer
    (switch-to-buffer "*R*")
    (delete-region (point-min) (point-max))
    (inferior-ess-send-input)
    (beginning-of-buffer)
    (kill-line)
    (switch-to-prev-buffer)))
(defun f-ess-mode ()
  (local-set-key (kbd "C-c C-c") 'ess-eval-buffer)
  (local-set-key (kbd "C-c c") 'f-ess-clear-inferior)
  (local-set-key (kbd "M-g C-y") 'ess-eval-line)
  (local-set-key (kbd "M-g M-y") 'ess-eval-region)
  (local-unset-key (kbd "C-c C-r"))
  (local-unset-key (kbd "C-c C-s"))
  (local-unset-key (kbd "_"))
  (setq ess-indent-level 2))
(add-hook 'ess-mode-hook 'f-ess-mode)
(defun f-ess-post-run ()
  (local-unset-key (kbd "_"))
  (setq v-skip-chars (concat ">" v-skip-chars)))
(add-hook 'ess-R-post-run-hook 'f-ess-post-run)

;; latex
(defun f-latex-mode ()
  (setq tab-width 2)
  (f-paragraph-set))
(add-hook 'latex-mode-hook 'f-latex-mode)

;; magit
(setenv "GIT_ASKPASS" "git-gui--askpass")
(defun f-magit-mode ()
  (local-set-key (kbd "[") 'magit-section-toggle)
  (local-set-key (kbd "]") 'magit-section-forward)
  (local-unset-key (kbd "TAB"))
  (local-unset-key (kbd "n"))
  )
(add-hook 'magit-mode-hook 'f-magit-mode)
(defun f-magit-status-sections ()
  (magit-insert-status-headers)
  (magit-insert-tracked-files)
  (magit-insert-unstaged-changes)
  (magit-insert-staged-changes)
  (magit-insert-unpulled-from-pushremote)
  (magit-insert-unpushed-to-pushremote)
  (magit-insert-am-sequence)
  (magit-insert-bisect-log)
  (magit-insert-bisect-output)
  (magit-insert-bisect-rest)
  (magit-insert-merge-log)
  (magit-insert-sequencer-sequence)
  (magit-insert-stashes)
  ;; (magit-insert-rebase-sequence)
  ;; (magit-insert-unpulled-from-upstream)
  ;; (magit-insert-unpushed-to-upstream)
  ;; (magit-insert-untracked-files)
  )
(add-hook 'magit-status-sections-hook 'f-magit-status-sections)
(defun f-magit-status-headers ()
  (magit-insert-head-branch-header)
  (magit-insert-diff-filter-header)
  (magit-insert-error-header)
  (magit-insert-repo-header)
  (magit-insert-tags-header)
  ;; (magit-insert-push-branch-header)
  ;; (magit-insert-upstream-branch-header)
  )
(add-hook 'magit-status-headers-hook 'f-magit-status-headers)

;; org
(setq org-startup-indented t)
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
(defun f-org-make-tdiff-string (diff)
  (let ((y (floor (/ diff 365)))
	(d (mod diff 365))
	(fmt "")
	(l nil))
    (cond ((= diff 0)
	   (setq fmt "today"))
	  ((< diff 0)
	   (if (< y 0)
	       (setq fmt (concat fmt "%d year"  (if (< y -1) "s") " ")
		     l (push (- y) l)))
	   (setq fmt (concat fmt "%d day"  (if (< d 364) "s") " until")
		 l (push (- 365 d) l)))
	  ((> diff 0)
	   (if (> y 0)
	       (setq fmt (concat fmt "%d year"  (if (> y 1) "s") " ")
		     l (push y l)))
	   (setq fmt (concat fmt "%d day"  (if (> d 1) "s") " since")
		 l (push d l))))
    (apply 'format fmt (nreverse l))))
(defun f-org-evaluate-time-range ()
  (interactive)
  (or
   (org-clock-update-time-maybe)
   (save-excursion
     (unless (org-at-timestamp-p)
       (goto-char (line-beginning-position))
       (re-search-forward org-tsr-regexp (line-end-position) t))
     (unless (org-at-timestamp-p)
       (user-error "")))
   (let* ((ts1 (match-string 0))
	  (time1 (org-time-string-to-time ts1))
	  (t1 (time-to-days time1))
	  (t2 (time-to-days (current-time)))
	  (diff (- t2 t1)))
     (message "%s" (f-org-make-tdiff-string diff)))))
(defun f-org-mode ()
  (local-set-key (kbd "C-c C--") 'f-org-evaluate-time-range)
  (local-set-key (kbd "C-c C-=") 'org-time-stamp)
  (local-set-key (kbd "C-c C-M-d") 'org-deadline)
  (local-set-key (kbd "C-c C-M-s") 'org-schedule)
  (local-set-key (kbd "C-c C-d") 'org-sparse-tree)
  (local-set-key (kbd "C-c C-s") 'org-sort)
  (local-set-key (kbd "C-c e") 'org-edit-special)
  (local-set-key (kbd "C-c t") 'org-table-toggle-coordinate-overlays)
  (local-unset-key (kbd "C-c ["))
  (local-unset-key (kbd "C-c ]"))
  (setq v-skip-chars (concat "*" v-skip-chars)))
(add-hook 'org-mode-hook 'f-org-mode)

;; python
(defun f-python-shell-clear-shell ()
  (interactive)
  (with-temp-buffer
    (switch-to-buffer "*Python*")
    (delete-region (point-min) (point-max))
    (comint-send-input)
    (beginning-of-buffer)
    (kill-line)
    (switch-to-prev-buffer)))
(defun f-python-shell-send-line ()
  (interactive)
  (python-shell-send-region
   (line-beginning-position) (line-end-position)))
(defun f-python-mode ()
  (local-set-key (kbd "C-c C-r") 'run-python)
  (local-set-key (kbd "C-c c") 'f-python-shell-clear-shell)
  (local-set-key (kbd "M-g C-y") 'f-python-shell-send-line)
  (local-set-key (kbd "M-g M-y") 'python-shell-send-region)
  (setq python-shell-interpreter "ipython"))
(add-hook 'python-mode-hook 'f-python-mode)

;; racket
(setq racket-racket-program "racket")
(setq racket-raco-program "raco")
(defun f-racket-send-buffer ()
  (interactive)
  (set-mark (point))
  (racket-send-region
   (point-min) (point-max)))
(defun f-racket-mode ()
  (local-set-key (kbd "C-c C-c") 'f-racket-send-buffer)
  (local-set-key (kbd "M-g C-y") 'racket-send-last-sexp)
  )
(add-hook 'racket-mode-hook 'f-racket-mode)

;; save
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; sql
(defun f-sql-mode ()
  (setq tab-width 4))
(add-hook 'sql-mode-hook 'f-sql-mode)
