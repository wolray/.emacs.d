(define-minor-mode visual-mode
  :init-value nil
  :keymap (make-sparse-keymap)
  (setq cursor-type (if visual-mode 'box 'bar)))

(defmacro m-ctrl-key (func &optional key)
  (let ((pfx (substring (symbol-name func) -1)))
    `(progn
       (defun ,func ()
	 (interactive)
	 (let* ((k (read-key-sequence nil))
		(ks (concat "C-" ,pfx " " (when (string= ,pfx k) "C-") k))
		(cmd (key-binding (kbd ks))))
	   (when (commandp cmd) (call-interactively cmd))))
       (define-key visual-mode-map (kbd (or ,key ,pfx)) ',func))))
(m-ctrl-key c-ctrl-c)
(m-ctrl-key c-ctrl-h)
(m-ctrl-key c-ctrl-x)

(defmacro m-map-key (key obj)
  `(let* ((ks (cadr ',key)) (mk (kbd (concat "M-g " ks))))
     (define-key key-translation-map
       ,key (if (symbolp ,obj) (progn (global-set-key mk ,obj) mk) ,obj))))
(m-map-key (kbd "<f10>") 'toggle-truncate-lines)
(m-map-key (kbd "<f12>") 'c-toggle-frame)
(m-map-key (kbd "<f1>") (kbd "SPC"))
(m-map-key (kbd "<f5>") (kbd "C-x C-s"))
(m-map-key (kbd "<f9>") 'linum-mode)
(m-map-key (kbd "M-'") 'comment-kill)
(m-map-key (kbd "M-,") nil)
(m-map-key (kbd "M-.") nil)
(m-map-key (kbd "M-/") nil)
(m-map-key (kbd "M-<") nil)
(m-map-key (kbd "M->") nil)
(m-map-key (kbd "M-SPC") 'c-visual-mode-lock)
(m-map-key (kbd "M-[") 'c-toggle-page)
(m-map-key (kbd "M-\"") nil)
(m-map-key (kbd "M-]") 'c-page-down)
(m-map-key (kbd "M-a") nil)
(m-map-key (kbd "M-b") nil)
(m-map-key (kbd "M-c") nil)
(m-map-key (kbd "M-d") nil)
(m-map-key (kbd "M-e") (kbd "M-:"))
(m-map-key (kbd "M-f") nil)
(m-map-key (kbd "M-g") (kbd "C-g"))
(m-map-key (kbd "M-h") 'c-marker-set)
(m-map-key (kbd "M-i") 'c-word-downcase)
(m-map-key (kbd "M-j") 'c-kmacro-cycle-ring-previous)
(m-map-key (kbd "M-k") 'c-kmacro-delete-ring-head)
(m-map-key (kbd "M-l") 'c-kmacro-cycle-ring-next)
(m-map-key (kbd "M-m") nil)
(m-map-key (kbd "M-n") (kbd "C-M-i"))
(m-map-key (kbd "M-o") 'c-word-upcase)
(m-map-key (kbd "M-p") 'c-kmacro-edit-macro)
(m-map-key (kbd "M-q") (kbd "C-M-%"))
(m-map-key (kbd "M-r") 'other-window)
(m-map-key (kbd "M-s") (kbd "C-M-s"))
(m-map-key (kbd "M-t") nil)
(m-map-key (kbd "M-u") 'c-word-capitalize)
(m-map-key (kbd "M-v") nil)
(m-map-key (kbd "M-w") nil)
(m-map-key (kbd "M-y") 'c-marker-recall)
(m-map-key (kbd "M-z") nil)
(m-map-key (kbd "M-{") nil)
(m-map-key (kbd "M-}") nil)

(defun c-visual-mode ()
  (interactive)
  (let ((q (key-binding (kbd "q"))))
    (cond ((eq q 'self-insert-command) (visual-mode))
	  ((eq q 'c-query-replace) (visual-mode -1))
	  (t (other-window 1)))))

(defun c-visual-mode-turn ()
  (interactive)
  (visual-mode -1)
  (if (eq (key-binding (kbd ";")) 'c-visual-mode)
      (local-set-key (kbd ";") 'self-insert-command)
    (local-set-key (kbd ";") 'c-visual-mode)
    (visual-mode)))

(global-set-key (kbd ";") 'c-visual-mode)
(global-set-key (kbd "C-c C-c") 'eval-buffer)
(global-set-key (kbd "C-c g") 'C-g)
(global-set-key (kbd "C-c h") 'eval-region)
(global-set-key (kbd "C-c i") 'c-sort-lines-or-paragraphs)
(global-set-key (kbd "C-c p") 'c-kmacro-start-macro)
(global-set-key (kbd "C-c y") 'eval-last-sexp)
(global-set-key (kbd "C-c z") 'C-c+C-z)
(global-set-key (kbd "C-h g") 'keyboard-quit)
(global-set-key (kbd "C-x .") 'c-update-version)
(global-set-key (kbd "C-x 4") 'winner-undo)
(global-set-key (kbd "C-x 8") 'beginning-of-buffer)
(global-set-key (kbd "C-x 9") 'end-of-buffer)
(global-set-key (kbd "C-x C-x") 'c-copy-buffer)
(global-set-key (kbd "C-x DEL") 'nil)
(global-set-key (kbd "C-x c") 'save-buffers-kill-terminal)
(global-set-key (kbd "C-x d") 'c-dired)
(global-set-key (kbd "C-x e") 'eval-last-sexp)
(global-set-key (kbd "C-x f") 'find-file)
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x k") 'c-revert-buffer)
(global-set-key (kbd "C-x l") 'c-clear-shell)
(global-set-key (kbd "C-x m") 'c-reload-current-mode)
(global-set-key (kbd "C-x o") 'c-open-current-folder)
(global-set-key (kbd "C-x q") 'read-only-mode)
(global-set-key (kbd "C-x r") 'c-rename-file-and-buffer)
(global-set-key (kbd "C-x s") 'save-buffer)
(global-set-key (kbd "C-x t") 'c-switch-to-scratch)
(global-set-key (kbd "C-x w") 'write-file)
(global-set-key (kbd "C-x z") 'suspend-frame)

(let ((map (make-sparse-keymap)))
  (define-key map (kbd ",") 'backward-up-list)
  (define-key map (kbd ".") 'up-list)
  (define-key map (kbd "0") 'c-transpose-paragraphs-down)
  (define-key map (kbd "7") 'c-transpose-paragraphs-up)
  (define-key map (kbd "8") 'C-<up>)
  (define-key map (kbd "9") 'C-<down>)
  (define-key map (kbd ";") 'c-visual-mode-turn)
  (define-key map (kbd "<apps>") 'C-g)
  (define-key map (kbd "<down>") 'enlarge-window)
  (define-key map (kbd "<left>") 'shrink-window-horizontally)
  (define-key map (kbd "<right>") 'enlarge-window-horizontally)
  (define-key map (kbd "<up>") 'shrink-window)
  (define-key map (kbd "M-g M-i") 'highlight-symbol-remove-all)
  (define-key map (kbd "SPC") 'ignore)
  (define-key map (kbd "h") 'c-hs-definition)
  (define-key map (kbd "i") 'c-hs)
  (define-key map (kbd "j") 'c-switch-to-prev-buffer)
  (define-key map (kbd "k") 'kill-this-buffer)
  (define-key map (kbd "l") 'c-switch-to-next-buffer)
  (define-key map (kbd "m") 'c-delete-pair)
  (define-key map (kbd "n") 'hippie-expand)
  (define-key map (kbd "o") 'c-hs-next)
  (define-key map (kbd "p") 'c-cua-rectangle-mark-mode)
  (define-key map (kbd "s") 'c-cycle-search-whitespace-regexp)
  (define-key map (kbd "u") 'c-hs-prev)
  (define-key map (kbd "y") 'repeat)
  (global-set-key (kbd "<apps>") map))

(setq repeat-message-function 'ignore)
(define-key visual-mode-map (kbd ",") 'C-M-b)
(define-key visual-mode-map (kbd ".") 'C-M-f)
(define-key visual-mode-map (kbd "0") 'c-transpose-lines-down)
(define-key visual-mode-map (kbd "1") 'M-^)
(define-key visual-mode-map (kbd "2") 'c-move-backward-line)
(define-key visual-mode-map (kbd "3") 'c-move-forward-line)
(define-key visual-mode-map (kbd "4") 'recenter-top-bottom)
(define-key visual-mode-map (kbd "5") 'M-h)
(define-key visual-mode-map (kbd "6") 'c-indent-paragraph)
(define-key visual-mode-map (kbd "7") 'c-transpose-lines-up)
(define-key visual-mode-map (kbd "8") '<up>)
(define-key visual-mode-map (kbd "9") '<down>)
(define-key visual-mode-map (kbd ";") 'self-insert-command)
(define-key visual-mode-map (kbd "a") 'C-k)
(define-key visual-mode-map (kbd "b") 'bs-show)
(define-key visual-mode-map (kbd "d") 'c-kill-region)
(define-key visual-mode-map (kbd "e") 'C-y)
(define-key visual-mode-map (kbd "f") 'c-set-or-exchange-mark)
(define-key visual-mode-map (kbd "g") 'C-g)
(define-key visual-mode-map (kbd "i") 'c-visual-mode)
(define-key visual-mode-map (kbd "j") '<left>)
(define-key visual-mode-map (kbd "k") 'DEL)
(define-key visual-mode-map (kbd "l") '<right>)
(define-key visual-mode-map (kbd "m") 'RET)
(define-key visual-mode-map (kbd "n") 'hippie-expand)
(define-key visual-mode-map (kbd "o") 'C-<right>)
(define-key visual-mode-map (kbd "p") 'c-kmacro-end-or-call-macro)
(define-key visual-mode-map (kbd "q") 'c-query-replace)
(define-key visual-mode-map (kbd "r") 'other-window)
(define-key visual-mode-map (kbd "s") 'C-s)
(define-key visual-mode-map (kbd "t") 'c-toggle-comment)
(define-key visual-mode-map (kbd "u") 'C-<left>)
(define-key visual-mode-map (kbd "v") 'split-line)
(define-key visual-mode-map (kbd "w") 'c-kill-ring-save)
(define-key visual-mode-map (kbd "y") 'repeat)
(define-key visual-mode-map (kbd "z") 'C-/)

;; cua
(require 'cua-rect)
(define-key cua--rectangle-keymap (kbd "<apps>") 'keyboard-quit)
(define-key cua--rectangle-keymap (kbd "<left>") 'cua-move-rectangle-left)
(define-key cua--rectangle-keymap (kbd "<return>") 'c-cua-sequence-rectangle)
(define-key cua--rectangle-keymap (kbd "<right>") 'cua-move-rectangle-right)
(define-key cua--rectangle-keymap (kbd "<tab>") 'cua-rotate-rectangle)

;; edmacro
(define-key edmacro-mode-map (kbd "M-g M-p") 'kill-this-buffer)

;; isearch
(define-key isearch-mode-map (kbd "<apps>") 'c-isearch-done)
(define-key isearch-mode-map (kbd "<down>") 'isearch-query-replace)
(define-key isearch-mode-map (kbd "<left>") 'isearch-repeat-backward)
(define-key isearch-mode-map (kbd "<right>") 'isearch-repeat-forward)
(define-key isearch-mode-map (kbd "<up>") 'c-isearch-yank)

;; query-replace
(define-key query-replace-map (kbd "4") 'recenter)
(define-key query-replace-map (kbd "h") 'automatic)
(define-key query-replace-map (kbd "r") 'backup)
