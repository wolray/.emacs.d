(defun c-vl-align ()
  (interactive)
  (when (string= buffer-file-name vl_log_file)
    (align-regexp 3 (point-max) "\\.[0-9]+\\( +\\)\\* \\[\\[" nil 4)))

(defun c-vl-occur ()
  (interactive)
  (if (string= buffer-file-name vl_log_file)
      (let ((link (f-vl-occur-get-link)))
	(when link (f-vl-occur (regexp-quote link) t)))
    (f-vl-occur "\\* ,.*$" t 2)))

(defun c-vl-update (&optional folder current)
  (interactive)
  (let* ((link (concat "[[" (or folder (concat buffer-file-name current)) "]]"))
	 (link-regexp (regexp-quote link))
	 (modtime (if folder (current-time) (visited-file-modtime))))
    (unless (eq modtime 0)
      (find-file-other-window vl_log_file)
      (visual-mode)
      (org-remove-occur-highlights nil nil t)
      (goto-char 3) (org-content)
      (let* ((date (format-time-string vl_time_format modtime))
	     (old (and (re-search-forward link-regexp nil t)
		       (re-search-backward "[0-9]+\\.[0-9]+" nil t)
		       (buffer-substring (match-beginning 0) (match-end 0))))
	     (temp (f-vl-occur link-regexp))
	     (prompt (concat (when old (concat "Last version: " old ". ")) "New version: "))
	     (new (read-string prompt)))
	(goto-char 3) (org-content)
	(call-interactively 'org-insert-subheading)
	(insert (concat date (make-string 4 ?\s) new " * " link))
	(c-vl-align)))))

(defun c-vl-update-current ()
  (interactive)
  (let* ((pt (f-beginning-of-line 0))
	 (st (concat "," (buffer-substring (1+ pt) (line-end-position))))
	 (rs (concat (regexp-quote st) "$")))
    (when (save-excursion (goto-char pt) (looking-at-p rs))
      (if (= (how-many rs (point-min) (point-max)) 1)
	  (c-vl-update nil (concat "::" st))
	(error "Not unique in current file!")))))

(defun c-vl-update-folder ()
  (interactive)
  (c-vl-update default-directory))

(defun f-vl-occur (regexp &optional msg beg end)
  (let ((cnt 0) (para org-occur-parameters))
    (org-remove-occur-highlights nil nil t)
    (if para (org-content)
      (push regexp org-occur-parameters)
      (save-excursion
	(goto-char (point-min))
	(org-overview)
	(while (re-search-forward regexp nil t)
	  (setq cnt (1+ cnt))
	  (when org-highlight-sparse-tree-matches
	    (org-highlight-new-match
	     (+ (or beg 0) (match-beginning 0))
	     (+ (or end 0) (match-end 0))))
	  (org-show-context 'occur-tree)))
      (when org-remove-highlights-with-change
	(org-add-hook 'before-change-functions
		      'org-remove-occur-highlights nil 'local))
      (recenter)
      (when msg (message "%d match(es)" cnt)))))

(defun f-vl-occur-get-link ()
  (save-excursion
    (end-of-line)
    (when (re-search-backward "\\[\\[d:/.*\\]\\]" nil t)
      (buffer-substring (match-beginning 0) (match-end 0)))))

(defvar vl_log_file (concat default_dir "..org"))
(defvar vl_time_format "%y-%m-%d %H:%M")
(defvar vl_time_regexp "[0-9][0-9]-[01][0-9]-[0-3][0-9]\\( [0-2][0-9]:[0-5][0-9]\\)?")
