
(defun my-newline ()
  (interactive)
  (forward-paragraph 1)
  (newline 2)
  (previous-line 1))

(defun my-kill-region ()
  (interactive)
  (if (region-active-p)
      (kill-region (region-beginning) (region-end))
    (kill-whole-line 1)))
(defun my-kill-ring-save ()
  (interactive)
  (if (region-active-p)
      (kill-ring-save
       (region-beginning) (region-end))
    (kill-ring-save
     (line-beginning-position) (line-end-position))))

(defun my-upcase-word ()
  (interactive)
  (left-word 1)
  (upcase-word 1))
(defun my-capitalize-word ()
  (interactive)
  (left-word 1)
  (capitalize-word 1))
(defun my-downcase-word ()
  (interactive)
  (left-word 1)
  (downcase-word 1))

(defun my-transpose-lines-up ()
  (interactive)
  (move-beginning-of-line 1)
  (unless (or (bobp) (eobp))
    (progn (next-line 1)
	   (transpose-lines -1)
	   (previous-line 2))))
(defun my-transpose-lines-down ()
  (interactive)
  (move-end-of-line 1)
  (unless (eobp)
    (progn
      (next-line 1)
      (unless (eobp) (transpose-lines 1))
      (previous-line 1)
      (move-end-of-line 1))))

(defun my-transpose-paragraphs-up ()
  (interactive)
  (backward-paragraph 1)
  (unless (bobp)
    (progn
      (forward-paragraph 1)
      (transpose-paragraphs -1)
      (backward-paragraph 2)))
  (forward-paragraph 1))
(defun my-transpose-paragraphs-down ()
  (interactive)
  (backward-paragraph 1)
  (forward-paragraph 1)
  (unless (eobp) (transpose-paragraphs 1)))

(defun my-comment (beg end)
  (interactive (if (use-region-p)
		   (list (region-beginning) (region-end))
		 (list (line-beginning-position)
		       (line-beginning-position 2))))
  (comment-or-uncomment-region beg end))

(defun my-move-beginning-of-line ()
  (interactive)
  (move-beginning-of-line (if (bolp) 0 1)))
(defun my-move-end-of-line ()
  (interactive)
  (move-end-of-line (if (eolp) 2 1)))

(defun my-switch-to-buffer-scratch ()
  (interactive)
  (switch-to-buffer "*scratch*"))

(defun my-org-evaluate-time-range (&optional to-buffer)
  (interactive "P")
  (or
   (org-clock-update-time-maybe)
   (save-excursion
     (unless (org-at-timestamp-p t)
       (goto-char (point-at-bol))
       (re-search-forward org-tsr-regexp (point-at-eol) t))
     (if (not (org-at-timestamp-p t))
	 (user-error "")))
   (let* ((ts1 (match-string 0))
	  (havetime (> (length ts1) 15))
	  (match-end (match-end 0))
	  (time1 (org-time-string-to-time ts1))
	  (t1 (org-float-time time1))
	  (t2 (org-float-time (butlast (current-time) 2)))
	  (diff (abs (- t2 t1)))
	  (negative (< (- t2 t1) 0))
	  (ys (floor (* 365 24 60 60)))
	  (ds (* 24 60 60))
	  (hs (* 60 60))
	  (fy "%dy %dd %02d:%02d")
	  (fy1 "%dy %dd")
	  (fd "%dd %02d:%02d")
	  (fd1 "%dd")
	  (fh "%02d:%02d")
	  y d h m align)
     (if havetime
	 (setq
	  y (floor (/ diff ys))  diff (mod diff ys)
	  ;; y 0
	  d (floor (/ diff ds))  diff (mod diff ds)
	  h (floor (/ diff hs))  diff (mod diff hs)
	  m (floor (/ diff 60)))
       (setq
	y (floor (/ diff ys))  diff (mod diff ys)
	;; y 0
	d (floor (+ (/ diff ds) 0.5))
	h 0 m 0))
     (if (not to-buffer)
	 (message "%s" (org-make-tdiff-string y d h m))
       (if (org-at-table-p)
	   (progn
	     (goto-char match-end)
	     (setq align t)
	     (and (looking-at " *|") (goto-char (match-end 0))))
	 (goto-char match-end))
       (if (looking-at
	    "\\( *-? *[0-9]+y\\)?\\( *[0-9]+d\\)? *[0-9][0-9]:[0-9][0-9]")
	   (replace-match ""))
       (if negative (insert " -"))
       (if (> y 0) (insert " " (format (if havetime fy fy1) y d h m))
	 (if (> d 0) (insert " " (format (if havetime fd fd1) d h m))
	   (insert " " (format fh h m))))
       (if align (org-table-align))
       (message "Time difference inserted")))))
