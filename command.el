(defmacro my-cycle-values (var values)
  `(let ((i 0) (j t))
    (while (and (< i (length ,values)) j)
      (when (equal ,var (elt ,values i)) (setq j nil))
      (setq i (1+ i)))
    (setq ,var (if (= i (length ,values)) (car ,values) (elt ,values i)))))

(defmacro my-map-key (obj key)
  `(if (symbolp ,obj)
       (let ((map-key (kbd (concat "M-g " (cadr ',key)))))
	 (global-set-key map-key ,obj)
	 (define-key key-translation-map ,key map-key))
     (define-key key-translation-map ,key ,obj)))

(defmacro over (ls)
  `(elt ,ls (cl-incf count 0)))
(fset 'incf 'cl-incf)

(defun my-backward-kill-line ()
  (interactive)
  (kill-region (line-beginning-position) (point))
  (indent-for-tab-command))

(defun my-capitalize-word ()
  (interactive)
  (capitalize-word -1))
(defun my-downcase-word ()
  (interactive)
  (downcase-word -1))
(defun my-upcase-word ()
  (interactive)
  (upcase-word -1))

(defun my-copy-buffer ()
  (interactive)
  (kill-ring-save (point-min) (point-max))
  (message "(my-copy-buffer)"))

(defun my-cycle-paren-shapes ()
  (interactive)
  (save-excursion
    (unless (looking-at-p (rx (any "([")))
      (backward-up-list))
    (let ((pt (point))
          (new (cond ((looking-at-p (rx "(")) (cons "[" "]"))
                     ((looking-at-p (rx "[")) (cons "(" ")"))
                     (t (beep) nil))))
      (when new
        (forward-sexp)
        (delete-char -1)
        (insert (cdr new))
        (goto-char pt)
        (delete-char 1)
        (insert (car new))))))

(defun my-kill-buffer ()
  (interactive)
  (kill-buffer (current-buffer)))

(defun my-kill-region ()
  (interactive)
  (if (use-region-p)
      (kill-region (region-beginning) (region-end))
    (kill-whole-line 1)))
(defun my-kill-ring-save ()
  (interactive)
  (if (use-region-p)
      (kill-ring-save (region-beginning) (region-end))
    (kill-ring-save (line-beginning-position) (line-end-position))))

(defun my-paragraph-set ()
  (interactive)
  (setq paragraph-start "\f\\|[ \t]*$"
	paragraph-separate "[ \t\f]*$")
  (message "(my-paragraph-set)"))

(defun my-sort-lines ()
  (interactive)
  (when (use-region-p)
    (sort-lines nil (region-beginning) (region-end))))
(defun my-sort-paragraphs ()
  (interactive)
  (sort-paragraphs nil (point-min) (point-max))
  (message "(my-sort-paragraphs)"))

(defun my-switch-to-scratch ()
  (interactive)
  (switch-to-buffer "*scratch*"))

(defun my-toggle-comment (beg end)
  (interactive (if (use-region-p)
		   (list (region-beginning) (region-end))
		 (list (line-beginning-position) (line-beginning-position 2))))
  (comment-or-uncomment-region beg end))

(defun my-toggle-search-whitespace-regexp ()
  (interactive)
  (my-cycle-values search-whitespace-regexp '("\\s-+" ".*?"))
  (message (format "(search-whitespace-regexp \"%s\")" search-whitespace-regexp)))

(defun my-transpose-lines-up ()
  (interactive)
  (move-beginning-of-line 1)
  (unless (or (bobp) (eobp))
    (next-line 1)
    (transpose-lines -1)
    (previous-line 2))
  (back-to-indentation))
(defun my-transpose-lines-down ()
  (interactive)
  (move-end-of-line 1)
  (unless (eobp)
    (next-line 1)
    (unless (eobp)
      (transpose-lines 1)
      (previous-line 1)
      (move-end-of-line 1))))

(defun my-transpose-paragraphs-up ()
  (interactive)
  (backward-paragraph 1)
  (if (bobp) (forward-paragraph)
    (progn
      (forward-paragraph 1)
      (transpose-paragraphs -1)
      (backward-paragraph 1))))
(defun my-transpose-paragraphs-down ()
  (interactive)
  (backward-paragraph 1)
  (forward-paragraph 1)
  (unless (eobp) (transpose-paragraphs 1)))

(defvar frame-alpha 100)
(defun my-toggle-frame-alpha ()
  (interactive)
  (my-cycle-values frame-alpha '(100 70))
  (set-frame-parameter (selected-frame) 'alpha frame-alpha))

(defvar page-range 10)
(make-variable-buffer-local 'page-range)
(defun my-toggle-page-range ()
  (interactive)
  (my-cycle-values page-range '(10 20 50))
  (message (format "(page-range %d)" page-range)))
(defun my-page-up ()
  (interactive)
  (move-beginning-of-line (- (1- page-range))))
(defun my-page-down ()
  (interactive)
  (move-beginning-of-line (1+ page-range)))

(defvar skip-chars " \t")
(make-variable-buffer-local 'skip-chars)
(defvar line-position 0)
(defun my-move-up-line ()
  (interactive)
  (cond ((= line-position 0)
	 (skip-chars-backward skip-chars)
	 (move-beginning-of-line (if (bolp) 0 1))
	 (skip-chars-forward skip-chars))
	((= line-position 1)
	 (move-end-of-line 0))))
(defun my-move-down-line ()
  (interactive)
  (cond ((= line-position 0)
	 (skip-chars-backward skip-chars)
	 (move-beginning-of-line 2)
	 (skip-chars-forward skip-chars))
	((= line-position 1)
	 (move-end-of-line (if (eolp) 2 1)))))
(defun my-move-beginning-of-line ()
  (interactive)
  (setq line-position 0)
  (my-move-up-line))
(defun my-move-end-of-line ()
  (interactive)
  (setq line-position 1)
  (my-move-down-line))
