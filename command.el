(defmacro m-cycle-values (var values)
  `(let ((i 0) (j t))
     (while (and (< i (length ,values)) j)
       (when (equal ,var (elt ,values i)) (setq j nil))
       (setq i (1+ i)))
     (setq ,var (if (= i (length ,values)) (car ,values) (elt ,values i)))))
(defmacro m-message (arg)
  `(message (concat "(" (symbol-name ',arg) (format " %s)" ,arg))))

(defmacro m-map-key (obj key)
  `(if (symbolp ,obj)
       (let ((map-key (kbd (concat "M-g " (cadr ',key)))))
	 (global-set-key map-key ,obj)
	 (define-key key-translation-map ,key map-key))
     (define-key key-translation-map ,key ,obj)))

(defun f-backward-kill-line ()
  (interactive)
  (kill-region (line-beginning-position) (point))
  (indent-for-tab-command))

(defun f-capitalize-word ()
  (interactive)
  (capitalize-word -1))
(defun f-downcase-word ()
  (interactive)
  (downcase-word -1))
(defun f-upcase-word ()
  (interactive)
  (upcase-word -1))

(defun f-copy-buffer ()
  (interactive)
  (save-excursion
    (goto-char (point-max))
    (unless (or (eobp) buffer-read-only) (newline 1)))
  (delete-trailing-whitespace)
  (kill-ring-save (point-min) (point-max))
  (message "(f-copy-buffer)"))

(defun f-cycle-paren-shapes ()
  (interactive)
  (save-excursion
    (unless (looking-at-p (rx (any "([")))
      (backward-up-list))
    (let ((pt (point))
          (new (cond ((looking-at-p (rx "(")) (cons "[" "]"))
                     ((looking-at-p (rx "[")) (cons "(" ")"))
                     (t (beep) nil))))
      (when new
        (forward-sexp)
        (delete-char -1)
        (insert (cdr new))
        (goto-char pt)
        (delete-char 1)
        (insert (car new))))))

(defun f-each (ls)
  (if (< count (length ls))
      (elt ls (cl-incf count 0))
    (keyboard-quit)))
(fset 'each 'f-each)
(fset 'incf 'cl-incf)

(defun f-kill-buffer ()
  (interactive)
  (kill-buffer (current-buffer)))

(defun f-kill-region ()
  (interactive)
  (if (use-region-p)
      (kill-region (region-beginning) (region-end))
    (kill-whole-line 1)
    (back-to-indentation)))
(defun f-kill-ring-save ()
  (interactive)
  (if (use-region-p)
      (kill-ring-save (region-beginning) (region-end))
    (save-excursion
      (back-to-indentation)
      (skip-chars-forward v-skip-chars)
      (kill-ring-save (point) (line-end-position)))
    (unless (minibufferp) (message "(f-kill-ring-save)"))))

(defun f-kmacro-define-macro (arg)
  (interactive "P")
  (if (or defining-kbd-macro executing-kbd-macro)
      (kmacro-end-macro arg)
    (kmacro-start-macro arg)))
(defun f-kmacro-call-macro (arg)
  (interactive "P")
  (if (use-region-p)
      (apply-macro-to-region-lines (region-beginning) (region-end))
    (kmacro-call-macro arg t)))

(defun f-paragraph-set ()
  (interactive)
  (setq paragraph-start "\f\\|[ \t]*$"
	paragraph-separate "[ \t\f]*$")
  (message "(f-paragraph-set)"))

(defun f-sort-lines ()
  (interactive)
  (when (use-region-p)
    (sort-lines nil (region-beginning) (region-end))))
(defun f-sort-paragraphs ()
  (interactive)
  (sort-paragraphs nil (point-min) (point-max))
  (message "(f-sort-paragraphs)"))

(defun f-switch-to-scratch ()
  (interactive)
  (switch-to-buffer "*scratch*"))

(defun f-toggle-comment (beg end)
  (interactive
   (if (use-region-p)
       (list (region-beginning) (region-end))
     (list (line-beginning-position) (line-beginning-position 2))))
  (comment-or-uncomment-region beg end))

(defun f-toggle-search-whitespace-regexp ()
  (interactive)
  (m-cycle-values search-whitespace-regexp '("\\s-+" ".*?"))
  (m-message search-whitespace-regexp))

(defun f-transpose-lines-up ()
  (interactive)
  (move-beginning-of-line 1)
  (unless (or (bobp) (eobp))
    (next-line 1)
    (transpose-lines -1)
    (previous-line 2))
  (back-to-indentation))
(defun f-transpose-lines-down ()
  (interactive)
  (move-end-of-line 1)
  (unless (eobp)
    (next-line 1)
    (unless (eobp)
      (transpose-lines 1)
      (previous-line 1)
      (move-end-of-line 1))))

(defun f-transpose-paragraphs-up ()
  (interactive)
  (backward-paragraph 1)
  (if (bobp) (forward-paragraph)
    (progn
      (forward-paragraph 1)
      (transpose-paragraphs -1)
      (backward-paragraph 1))))
(defun f-transpose-paragraphs-down ()
  (interactive)
  (backward-paragraph 1)
  (forward-paragraph 1)
  (unless (eobp) (transpose-paragraphs 1)))

(defvar v-frame 100)
(defun f-toggle-v-frame ()
  (interactive)
  (m-cycle-values v-frame '(100 70))
  (set-frame-parameter (selected-frame) 'alpha v-frame))

(defvar v-page 10)
(make-variable-buffer-local 'v-page)
(defun f-toggle-v-page ()
  (interactive)
  (m-cycle-values v-page '(10 20 50))
  (m-message v-page))
(defun f-page-up ()
  (interactive)
  (move-beginning-of-line (- (1- v-page))))
(defun f-page-down ()
  (interactive)
  (move-beginning-of-line (1+ v-page)))

(defvar v-skip-chars " \t")
(make-variable-buffer-local 'v-skip-chars)
(defun f-move-up-line ()
  (interactive)
  (skip-chars-backward v-skip-chars)
  (move-beginning-of-line (if (bolp) 0 1))
  (skip-chars-forward v-skip-chars))
(defun f-move-up-line-end ()
  (interactive)
  (move-end-of-line 0))
(defun f-move-down-line ()
  (interactive)
  (save-excursion
    (move-end-of-line 1)
    (when (and (eobp) (not buffer-read-only)) (newline 1)))
  (skip-chars-backward v-skip-chars)
  (move-beginning-of-line 2)
  (skip-chars-forward v-skip-chars))
(defun f-move-down-line-end ()
  (interactive)
  (move-end-of-line (if (eolp) 2 1)))
