
(defun my-buffer-paragraph-style ()
  (interactive)
  (unless
      (not (y-or-n-p (format "my-buffer-paragraph-style?")))
    (save-excursion
      (beginning-of-buffer)
      (while (not (eobp))
	(open-line 2)
	(delete-blank-lines)
	(forward-paragraph 1)))))

(defvar my-page-jump-range 5)
(make-variable-buffer-local 'my-page-jump-range)
(defun my-page-jump-minus ()
  (interactive)
  (cond ((= my-page-jump-range 5) nil)
	((= my-page-jump-range 10) (setq my-page-jump-range 5))
	((= my-page-jump-range 20) (setq my-page-jump-range 10))
	((= my-page-jump-range 50) (setq my-page-jump-range 20))
	((= my-page-jump-range 100) (setq my-page-jump-range 50)))
  (message (format "my-page-jump-range %d" my-page-jump-range)))
(defun my-page-jump-plus ()
  (interactive)
  (cond ((= my-page-jump-range 5) (setq my-page-jump-range 10))
	((= my-page-jump-range 10) (setq my-page-jump-range 20))
	((= my-page-jump-range 20) (setq my-page-jump-range 50))
	((= my-page-jump-range 50) (setq my-page-jump-range 100))
	((= my-page-jump-range 100) nil))
  (message (format "my-page-jump-range %d" my-page-jump-range)))
(defun my-page-up ()
  (interactive)
  (move-beginning-of-line (- (1- my-page-jump-range))))
(defun my-page-down ()
  (interactive)
  (move-beginning-of-line (1+ my-page-jump-range)))

(defun my-switch-to-minibuffer ()
  (interactive)
  (when (active-minibuffer-window)
    (select-window (active-minibuffer-window))))

(defun my-ac-sources ()
  (interactive)
  (unless auto-complete-mode (auto-complete-mode))
  (if (= (length ac-sources) 1)
      (progn
	(setq ac-sources
	      (append ac-sources
		      '(
			ac-source-files-in-current-dir
			ac-source-functions
			ac-source-variables
			)))
	(message "(length ac-sources) %d" (length ac-sources)))
    (progn
      (setq ac-sources
	    '(
	      ac-source-words-in-same-mode-buffers ;default
	      ))
      (message "(length ac-sources) %d" (length ac-sources)))))

(defun my-beginning-and-end-of-buffer ()
  (interactive)
  (if (bobp) (end-of-buffer) (beginning-of-buffer)))

(defun my-kill-region ()
  (interactive)
  (if (region-active-p)
      (kill-region (region-beginning) (region-end))
    (kill-whole-line 1)))
(defun my-kill-ring-save ()
  (interactive)
  (if (region-active-p)
      (kill-ring-save
       (region-beginning) (region-end))
    (kill-ring-save
     (line-beginning-position) (line-end-position))))

(defun my-upcase-word ()
  (interactive)
  (upcase-word -1))
(defun my-capitalize-word ()
  (interactive)
  (capitalize-word -1))
(defun my-downcase-word ()
  (interactive)
  (downcase-word -1))

(defun my-comment (beg end)
  (interactive (if (use-region-p)
		   (list (region-beginning) (region-end))
		 (list (line-beginning-position)
		       (line-beginning-position 2))))
  (comment-or-uncomment-region beg end))

(defun my-move-beginning-of-line ()
  (interactive)
  (move-beginning-of-line (if (bolp) 0 1)))
(defun my-move-end-of-line ()
  (interactive)
  (move-end-of-line (if (eolp) 2 1)))

(defun my-org-make-tdiff-string (diff)
  (let ((y (floor (/ diff 365)))
	(d (mod diff 365))
	(fmt "")
	(l nil))
    (cond ((= diff 0)
	   (setq fmt "today"))
	  ((< diff 0)
	   (if (< y 0)
	       (setq fmt (concat fmt "%d year"  (if (< y -1) "s") " ")
		     l (push (- y) l)))
	   (setq fmt (concat fmt "%d day"  (if (< d 364) "s") " until")
		 l (push (- 365 d) l)))
	  ((> diff 0)
	   (if (> y 0)
	       (setq fmt (concat fmt "%d year"  (if (> y 1) "s") " ")
		     l (push y l)))
	   (setq fmt (concat fmt "%d day"  (if (> d 1) "s") " since")
		 l (push d l))))
    (apply 'format fmt (nreverse l))))
(defun my-org-evaluate-time-range ()
  (interactive)
  (or
   (org-clock-update-time-maybe)
   (save-excursion
     (unless (org-at-timestamp-p)
       (goto-char (point-at-bol))
       (re-search-forward org-tsr-regexp (point-at-eol) t))
     (if (not (org-at-timestamp-p))
	 (user-error "")))
   (let* ((ts1 (match-string 0))
	  (time1 (org-time-string-to-time ts1))
	  (t1 (time-to-days time1))
	  (t2 (time-to-days (current-time)))
	  (diff (- t2 t1)))
     (message "%s" (my-org-make-tdiff-string diff)))))

(defun my-transpose-lines-up ()
  (interactive)
  (move-beginning-of-line 1)
  (unless (or (bobp) (eobp))
    (progn (next-line 1)
	   (transpose-lines -1)
	   (previous-line 2))))
(defun my-transpose-lines-down ()
  (interactive)
  (move-end-of-line 1)
  (unless (eobp)
    (progn
      (next-line 1)
      (unless (eobp) (transpose-lines 1))
      (previous-line 1)
      (move-end-of-line 1))))

(defun my-transpose-paragraphs-up ()
  (interactive)
  (backward-paragraph 1)
  (if (bobp) (forward-paragraph)
    (progn
      (forward-paragraph 1)
      (transpose-paragraphs -1)
      (backward-paragraph 1))))
(defun my-transpose-paragraphs-down ()
  (interactive)
  (backward-paragraph 1)
  (forward-paragraph 1)
  (unless (eobp)
    (transpose-paragraphs 1)))
