(add-hook 'multiple-cursors-mode-hook '(lambda ()
                                         (unless multiple-cursors-mode
                                           (setq-default cursor-type 'bar))))

(advice-add 'mc/mark-next-like-this :before 'my-box-cursor)
(advice-add 'mc/mark-previous-like-this :before 'my-box-cursor)

(define-key key-translation-map (kbd "<escape>") (kbd "C-g"))
(define-key key-translation-map (kbd "C-&") (kbd "C-S-<up>"))
(define-key key-translation-map (kbd "C-(") (kbd "S-<down>"))
(define-key key-translation-map (kbd "C-)") (kbd "C-S-<down>"))
(define-key key-translation-map (kbd "C-*") (kbd "S-<up>"))
(define-key key-translation-map (kbd "C-,") (kbd "C-M-b"))
(define-key key-translation-map (kbd "C-.") (kbd "C-M-f"))
(define-key key-translation-map (kbd "C-/") (kbd "H-/"))
(define-key key-translation-map (kbd "C-0") (kbd "C-<down>"))
(define-key key-translation-map (kbd "C-7") (kbd "C-<up>"))
(define-key key-translation-map (kbd "C-8") (kbd "<up>"))
(define-key key-translation-map (kbd "C-9") (kbd "<down>"))
(define-key key-translation-map (kbd "C-S-j") (kbd "S-<left>"))
(define-key key-translation-map (kbd "C-S-l") (kbd "S-<right>"))
(define-key key-translation-map (kbd "C-S-o") (kbd "C-S-<right>"))
(define-key key-translation-map (kbd "C-S-p") (kbd "C-S-e"))
(define-key key-translation-map (kbd "C-S-u") (kbd "C-S-<left>"))
(define-key key-translation-map (kbd "C-S-y") (kbd "C-S-a"))
(define-key key-translation-map (kbd "C-c") (kbd "C-w"))
(define-key key-translation-map (kbd "C-h") (kbd "C-h"))
(define-key key-translation-map (kbd "C-j") (kbd "<left>"))
(define-key key-translation-map (kbd "C-k") (kbd "C-c"))
(define-key key-translation-map (kbd "C-l") (kbd "<right>"))
(define-key key-translation-map (kbd "C-n") (kbd "C-/"))
(define-key key-translation-map (kbd "C-o") (kbd "C-<right>"))
(define-key key-translation-map (kbd "C-p") (kbd "C-e"))
(define-key key-translation-map (kbd "C-u") (kbd "C-<left>"))
(define-key key-translation-map (kbd "C-v") (kbd "C-y"))
(define-key key-translation-map (kbd "C-x") (kbd "C-x"))
(define-key key-translation-map (kbd "C-y") (kbd "C-a"))
(define-key key-translation-map (kbd "ESC") (kbd "C-g"))
(global-set-key (kbd "<f7>") 'symbol-overlay-mode)
(global-set-key (kbd "<f8>") 'symbol-overlay-remove-all)
(global-set-key (kbd "C-<") 'my-window-prev)
(global-set-key (kbd "C->") 'my-window-next)
(global-set-key (kbd "C-M-0") 'mc/skip-to-next-like-this)
(global-set-key (kbd "C-M-7") 'mc/skip-to-previous-like-this)
(global-set-key (kbd "C-M-8") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-M-9") 'mc/mark-next-like-this)
(global-set-key (kbd "C-b") 'bs-show)
(global-set-key (kbd "C-c 1") 'delete-other-windows)
(global-set-key (kbd "C-c 2") 'split-window-below)
(global-set-key (kbd "C-c 3") 'split-window-horizontally)
(global-set-key (kbd "C-c 4") 'delete-window)
(global-set-key (kbd "C-c 5") 'winner-undo)
(global-set-key (kbd "C-c C-c") 'kill-whole-line)
(global-set-key (kbd "C-c b") 'eval-buffer)
(global-set-key (kbd "C-c e") 'eval-last-sexp)
(global-set-key (kbd "C-c f") 'find-file)
(global-set-key (kbd "C-c g") 'my-git-client)
(global-set-key (kbd "C-c s") 'c-sort-text)
(global-set-key (kbd "C-d") 'my-duplicate)
(global-set-key (kbd "C-f") 'my-isearch)
(global-set-key (kbd "C-s") 'save-buffer)
(global-set-key (kbd "C-w") 'c-kill-ring-save)
(global-set-key (kbd "C-x") 'c-kill-region)
(global-set-key (kbd "H-/") 'c-toggle-comment)
(global-set-key (kbd "M-8") 'c-transpose-lines-up)
(global-set-key (kbd "M-9") 'c-transpose-lines-down)
(global-set-key (kbd "M-i") 'symbol-overlay-put)
(global-set-key (kbd "M-j") 'c-switch-to-prev-buffer)
(global-set-key (kbd "M-k") 'kill-this-buffer)
(global-set-key (kbd "M-l") 'c-switch-to-next-buffer)
(global-set-key (kbd "M-o") 'symbol-overlay-jump-next)
(global-set-key (kbd "M-p") 'symbol-overlay-switch-forward)
(global-set-key (kbd "M-u") 'symbol-overlay-jump-prev)
(global-set-key (kbd "M-y") 'symbol-overlay-switch-backward)

(defun my-beginning-of-line (arg)
  (interactive "^p")
  (if (or (bolp) (> (current-column) (f-beginning-of-line 1)))
      (f-beginning-of-line)
    (beginning-of-line)))
(fset 'move-beginning-of-line 'my-beginning-of-line)

(defun my-box-cursor (&rest r)
  (setq-default cursor-type 'box))

(defun my-duplicate (arg)
  (interactive "p")
  (let (beg end)
    (if (use-region-p)
        (setq beg (region-beginning)
              end (region-end))
      (setq beg (line-beginning-position)
            end (line-end-position))
      (end-of-line)
      (newline))
    (insert (buffer-substring-no-properties beg end))))

(defun my-git-client ()
  (interactive)
  (shell-command (concat "smerge "
                         (if buffer-file-name
                             (file-name-directory buffer-file-name)
                           (convert-standard-filename default-directory)))))

(defun my-isearch ()
  (interactive)
  (if (use-region-p)
      (let* ((beg (region-beginning))
	     (txt (buffer-substring-no-properties beg (region-end))))
	(setq mark-active nil)
	(goto-char beg)
	(isearch-forward nil t)
	(isearch-yank-string txt))
    (call-interactively 'isearch-forward)))

(defun my-window-next ()
  (interactive)
  (other-window 1))

(defun my-window-prev ()
  (interactive)
  (other-window -1))

(let ((map isearch-mode-map))
  (define-key map (kbd "C-S-r") 'isearch-query-replace-regexp)
  (define-key map (kbd "C-g") 'my-isearch-done)
  (define-key map (kbd "C-r") 'isearch-query-replace)
  (define-key map (kbd "M-o") 'isearch-repeat-forward)
  (define-key map (kbd "M-u") 'isearch-repeat-backward)
  )
